// Mocks generated by Mockito 5.0.17 from annotations
// in quick_chat/test/data/repository/repository_impl_test.dart.
// Do not manually edit this file.

import 'dart:async' as _i4;

import 'package:mockito/mockito.dart' as _i1;
import 'package:quick_chat/data/datasources/local_data_source.dart' as _i3;
import 'package:quick_chat/data/datasources/remote_data_source.dart' as _i5;
import 'package:quick_chat/data/models/room_model.dart' as _i2;
import 'package:quick_chat/data/models/user_model.dart' as _i6;

// ignore_for_file: avoid_redundant_argument_values
// ignore_for_file: avoid_setters_without_getters
// ignore_for_file: comment_references
// ignore_for_file: implementation_imports
// ignore_for_file: invalid_use_of_visible_for_testing_member
// ignore_for_file: prefer_const_constructors
// ignore_for_file: unnecessary_parenthesis
// ignore_for_file: camel_case_types

class _FakeRoomModel_0 extends _i1.Fake implements _i2.RoomModel {}

/// A class which mocks [LocalDataSource].
///
/// See the documentation for Mockito's code generation for more information.
class MockLocalDataSource extends _i1.Mock implements _i3.LocalDataSource {
  MockLocalDataSource() {
    _i1.throwOnMissingStub(this);
  }

  @override
  _i4.Future<String?> pickImage() =>
      (super.noSuchMethod(Invocation.method(#pickImage, []),
          returnValue: Future<String?>.value()) as _i4.Future<String?>);
}

/// A class which mocks [RemoteDataSource].
///
/// See the documentation for Mockito's code generation for more information.
class MockRemoteDataSource extends _i1.Mock implements _i5.RemoteDataSource {
  MockRemoteDataSource() {
    _i1.throwOnMissingStub(this);
  }

  @override
  _i4.Stream<List<_i6.UserModel>> getUsers(
          String? keyword, _i6.UserModel? currentUser) =>
      (super.noSuchMethod(Invocation.method(#getUsers, [keyword, currentUser]),
              returnValue: Stream<List<_i6.UserModel>>.empty())
          as _i4.Stream<List<_i6.UserModel>>);
  @override
  _i4.Stream<List<dynamic>> getMessages(String? roomId) => (super.noSuchMethod(
      Invocation.method(#getMessages, [roomId]),
      returnValue: Stream<List<dynamic>>.empty()) as _i4.Stream<List<dynamic>>);
  @override
  _i4.Future<String> createUser({_i6.UserModel? user, String? imagePath}) =>
      (super.noSuchMethod(
          Invocation.method(
              #createUser, [], {#user: user, #imagePath: imagePath}),
          returnValue: Future<String>.value('')) as _i4.Future<String>);
  @override
  _i4.Future<String> sendMessage(
          {dynamic message, String? imagePath, _i2.RoomModel? room}) =>
      (super.noSuchMethod(
          Invocation.method(#sendMessage, [],
              {#message: message, #imagePath: imagePath, #room: room}),
          returnValue: Future<String>.value('')) as _i4.Future<String>);
  @override
  _i4.Future<String> updateUser({_i6.UserModel? user, String? imagePath}) =>
      (super.noSuchMethod(
          Invocation.method(
              #updateUser, [], {#user: user, #imagePath: imagePath}),
          returnValue: Future<String>.value('')) as _i4.Future<String>);
  @override
  _i4.Stream<_i6.UserModel?> getUser(String? currentUserId) =>
      (super.noSuchMethod(Invocation.method(#getUser, [currentUserId]),
              returnValue: Stream<_i6.UserModel?>.empty())
          as _i4.Stream<_i6.UserModel?>);
  @override
  _i4.Stream<List<_i2.RoomModel?>> getRooms(String? currentUserId) =>
      (super.noSuchMethod(Invocation.method(#getRooms, [currentUserId]),
              returnValue: Stream<List<_i2.RoomModel?>>.empty())
          as _i4.Stream<List<_i2.RoomModel?>>);
  @override
  _i4.Future<_i2.RoomModel> createRoom(_i2.RoomModel? room) =>
      (super.noSuchMethod(Invocation.method(#createRoom, [room]),
              returnValue: Future<_i2.RoomModel>.value(_FakeRoomModel_0()))
          as _i4.Future<_i2.RoomModel>);
}
